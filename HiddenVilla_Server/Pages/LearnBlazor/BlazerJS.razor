@page "/blazorjs"
@using HiddenVilla_Server.Helper
@inject IJSRuntime JsRuntime;

<h3>BlazerJS</h3>

<div class="row">
    <button class="btn btn-secondary" @onclick="() => TestConfirmBox(ConfirmMessage)">Test confirm Button</button>
</div>
<div class="row mt-4">
    <button class="btn btn-success" @onclick="@TestSuccess">Test Toastr Success</button>
    <button class="btn btn-danger" @onclick="@TestFailure">Test Toaster Error</button>
</div>
<div class="row mt-4">
    <button class="btn btn-success" @onclick="@TestSuccessSwal">Test Swal Success</button>
     <button class="btn btn-danger" @onclick="@TestFailureSwal">Test Swal Error</button>
</div>
<div class="row">
    @if (ConfirmResult)
    {
        <p>Confirmation has been made!</p>
    }
    else
    {
        <p>Confirmation Pennding!</p>
    }
</div>

@code {
    private string ConfirmMessage = "Are you sure you want to click?";
    private bool ConfirmResult { get; set; }

    private async Task TestConfirmBox(string message)
    {
        ConfirmResult = await JsRuntime.InvokeAsync<bool>("confirm", message);
    }
    
    private async Task TestSuccess()
    {
        await JsRuntime.ToastrSucces("Success Message");
    }
    
    private async Task TestFailure()
    {
        await JsRuntime.ToastrError("Error Message");
    }

    private async Task TestSuccessSwal()
    {
        await JsRuntime.InvokeVoidAsync("ShowSwal", "success", "Success Message");
    }
    
    private async Task TestFailureSwal()
    {
        await JsRuntime.InvokeVoidAsync("ShowSwal", "error", "Task failed!");
    }
}